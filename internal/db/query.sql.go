// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addSendedVote = `-- name: AddSendedVote :exec
INSERT INTO SendedPolls(poll_tg_id) VALUES(?)
`

func (q *Queries) AddSendedVote(ctx context.Context, pollTgID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, addSendedVote, pollTgID)
	return err
}

const getLastIdMorningPoll = `-- name: GetLastIdMorningPoll :one
SELECT id FROM MorningPolls ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetLastIdMorningPoll(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastIdMorningPoll)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLastSendedPoll = `-- name: GetLastSendedPoll :one
SELECT id, poll_tg_id FROM SendedPolls ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetLastSendedPoll(ctx context.Context) (SendedPoll, error) {
	row := q.db.QueryRowContext(ctx, getLastSendedPoll)
	var i SendedPoll
	err := row.Scan(&i.ID, &i.PollTgID)
	return i, err
}

const getMorningPollById = `-- name: GetMorningPollById :one
SELECT id, file_name FROM MorningPolls WHERE id == ?
`

func (q *Queries) GetMorningPollById(ctx context.Context, id int64) (MorningPoll, error) {
	row := q.db.QueryRowContext(ctx, getMorningPollById, id)
	var i MorningPoll
	err := row.Scan(&i.ID, &i.FileName)
	return i, err
}

const getOpionsForPoll = `-- name: GetOpionsForPoll :many
SELECT id, morning_poll_id, option_tetxt, "foreign" FROM MorningPollsOption WHERE morning_poll_id = ?
`

func (q *Queries) GetOpionsForPoll(ctx context.Context, morningPollID sql.NullInt64) ([]MorningPollsOption, error) {
	rows, err := q.db.QueryContext(ctx, getOpionsForPoll, morningPollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MorningPollsOption
	for rows.Next() {
		var i MorningPollsOption
		if err := rows.Scan(
			&i.ID,
			&i.MorningPollID,
			&i.OptionTetxt,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
